name: CI/CD Workflow

on:
  pull_request: # qualquer branch ao abrir PR e atualizar o PR
    types: [ opened, synchronize ]

jobs:
  install-code:
    name: Install Code
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]
    environment:
      name: ${{ github.event.pull_request.base.ref == 'main' && 'production' || (github.event.pull_request.base.ref == 'develop' && 'staging') }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

  analyze-code:
    name: Analyze Code
    needs: [install-code]
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.pull_request.base.ref == 'main' && 'production' || (github.event.pull_request.base.ref == 'develop' && 'staging') }}
      steps:
        - name: Checkout repository
          uses: actions/checkout@v4

        - name: Check Lint
          run: pnpm run lint:check

        - name: Check Typing
          run: pnpm run type-check

  test-code:
    name: Test Code
    needs: [analyze-code]
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.pull_request.base.ref == 'main' && 'production' || (github.event.pull_request.base.ref == 'develop' && 'staging') }}
      steps:
        - name: Checkout repository
          uses: actions/checkout@v4

        - name: Run unit tests
          run: pnpm run test:unit:ci

        - name: Run end-to-end tests
          run: pnpm run test:e2e:ci
